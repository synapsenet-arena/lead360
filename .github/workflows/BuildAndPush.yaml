name: Build and Push 
run-name: ${{ github.actor }} is testing out Building the project
on: [push]
jobs:
  # Build-Lead360:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  #     - name: Check out repository code
  #       uses: actions/checkout@v4
  #     - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
  #     - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
  #     - run: echo "üçè This job's status is ${{ job.status }}."
  #     - name: Setup Node.js environment
  #       uses: actions/setup-node@v4.0.3
  #       with:
  #         node-version-file: package.json
  #     - name: Setup NVM and yarn
  #       run: |
  #         sudo apt-get install curl
  #         curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
  #         corepack enable
  #     - name: Setup PostgreSQL Database
  #       run: make postgres-on-linux
  #     - name: Setup Environment variables
  #       run: | 
  #         cp ./packages/twenty-front/.env.example ./packages/twenty-front/.env
  #         cp ./packages/twenty-server/.env.example ./packages/twenty-server/.env
  #     - name: Install dependencies
  #       run: yarn
  #     - name: Build Project
  #       run: |
  #         npx nx database:reset twenty-server
  #         npx nx build twenty-server
  #         npx nx build twenty-front
  # Build-Docker-Image:
  #   needs:  Build-Lead360
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Build Lead360 Database
  #       uses: docker/build-push-action@v6.4.0
  #       with:
  #         file: ./DockerfileDB
  #         tags: db360:latest
  #     - name: Build Lead360
  #       uses: docker/build-push-action@v6.4.0
  #       with:
  #         file: ./Dockerfile
  #         tags: latest
  #     - name: GitHub Action for DigitalOcean - doctl
  #       uses: digitalocean/action-doctl@v2.5.1
  #       with:
  #         # Skip authentication
  #         no_auth: FALSE
  #         # DigitalOcean API Token
  #         token: ${{secrets.DIGITALOCEAN_ACCESS_TOKEN}}
  #     - name: push-db360
  #       run: |
  #             echo ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} | docker login registry.digitalocean.com -u doctl --password-stdin
  #             docker tag db360:latest  registry.digitalocean.com/${{secrets.REGISTRY_NAME}}/d360
  #             docker push registry.digitalocean.com/${{secrets.REGISTRY_NAME}}/d360

  
  Deploy-lead360-App:
      # needs:  Build-Lead360
      runs-on: ubuntu-latest
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4

        - name: Install doctl
          uses: digitalocean/action-doctl@v2
          with:
            token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        - name: Check working directory
          run: pwd
        
        - name: List files
          run: ls

        - name: List files in the repository
          run: |
            ls ${{ github.workspace }}
        - name: Build container image
          run: docker build -t ${{ secrets.REGISTRY_NAME }}/db:latest -f ./DockerfileDB .
        
        - name: Log in to DigitalOcean Container Registry with short-lived credentials
          run: doctl registry login --expiry-seconds 1200
        
        - name: Push image to DigitalOcean Container Registry
          run: docker push ${{ secrets.REGISTRY_NAME }}/db:latest

        # - name: Update deployment file
        #   run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/db:latest|' ./lead360.yaml
        
        - name: Save DigitalOcean kubeconfig with short-lived credentials
          run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}

        - name: Show deployment file
          run: cat ./lead360.yaml
        
        - name: print deployment file
          run: echo ./lead360.yaml

        - name: Restart
          run: kubectl apply -f ./lead360-restart.yaml
          
        - name: Deploy to DigitalOcean Kubernetes
          run: kubectl apply -f ./lead360.yaml
        
        - name: Verify deployment
          run: kubectl rollout status deployment/lead360-deployment
